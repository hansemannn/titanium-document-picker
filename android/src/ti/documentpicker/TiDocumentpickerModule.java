/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.documentpicker;

import android.app.Activity;
import android.content.ClipData;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.provider.OpenableColumns;
import android.text.TextUtils;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiIntentWrapper;

import java.util.ArrayList;

@Kroll.module(name = "TiDocumentpicker", id = "ti.documentpicker")
public class TiDocumentpickerModule extends KrollModule {

    public static final String TAG = "TiDocumentpickerModule";

    private static ContentResolver contentResolver;

    public TiDocumentpickerModule() {
        super();

        if (contentResolver == null) {
            contentResolver = TiApplication.getInstance().getContentResolver();
        }
    }

    @Kroll.method
    public void showDocumentPicker(KrollDict options) {
        KrollFunction callback = null;

        if (options.containsKey("onSelect")) {
            callback = (KrollFunction) options.get("onSelect");
        }


        final KrollFunction fCallback = callback;

        Activity activity = TiApplication.getInstance().getCurrentActivity();
        TiActivitySupport activitySupport = (TiActivitySupport) activity;

        TiIntentWrapper filepickerWrapper = new TiIntentWrapper(new Intent());
        Intent filepickerIntent = filepickerWrapper.getIntent();
        filepickerIntent.setAction(Intent.ACTION_GET_CONTENT);

        filepickerIntent.setType("*/*");

        if (options.containsKey("types")) {
            String[] types = TiConvert.toStringArray((Object[])options.get("types"));
            filepickerIntent.putExtra(Intent.EXTRA_MIME_TYPES, types);
            Log.i("---", TextUtils.join(",",types));
        }

        filepickerIntent.addCategory(Intent.CATEGORY_DEFAULT);
        filepickerWrapper.setWindowId(TiIntentWrapper.createActivityName("FilePicker"));

        final int PICK_SINGLE = activitySupport.getUniqueResultCode();
        final int PICK_MULTIPLE = activitySupport.getUniqueResultCode();
        boolean allowMultiple = false;

        if (options.containsKey(TiC.PROPERTY_ALLOW_MULTIPLE)) {
            allowMultiple = TiConvert.toBoolean(options.get(TiC.PROPERTY_ALLOW_MULTIPLE));
            filepickerIntent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, allowMultiple);
        }

        final int code = allowMultiple ? PICK_MULTIPLE : PICK_SINGLE;

        activitySupport.launchActivityForResult(filepickerIntent, code, new TiActivityResultHandler() {
            @Override
            public void onResult(Activity activity, int requestCode, int resultCode, Intent data) {
                if (requestCode != code) {
                    return;
                }

                if ((resultCode == Activity.RESULT_CANCELED) || (data == null)) {
                    if (fCallback != null) {
                        KrollDict response = new KrollDict();
                        response.put("success", true);
                        response.put("cancel", true);
                        response.put("documents", new ArrayList<String>().toArray(new KrollDict[0]));

                        fCallback.callAsync(getKrollObject(), response);
                    }
                    return;
                }

                // Fetch a URI to file selected. (Only applicable to single file selection.)
                Uri uri = data.getData();
                String path = (uri != null) ? uri.toString() : null;

                // Handle multiple file selection, if enabled.
                if (requestCode == PICK_MULTIPLE) {
                    // Wrap all selected file(s) in Titanium "CameraMediaItemType" dictionaries.
                    ArrayList<KrollDict> selectedFiles = new ArrayList<>();
                    ClipData clipData = data.getClipData();
                    if (clipData != null) {
                        // Fetch file(s) from clip data.
                        int count = clipData.getItemCount();
                        for (int index = 0; index < count; index++) {
                            ClipData.Item item = clipData.getItemAt(index);
                            if ((item == null) || (item.getUri() == null)) {
                                continue;
                            }
                            KrollDict file = new KrollDict();
                            file.put("name", getFileName(item.getUri()));
                            file.put("nativePath", item.getUri().toString());

                            selectedFiles.add(file);
                        }
                    } else if (path != null) {
                        KrollDict file = new KrollDict();
                        file.put("name", getFileName(uri));
                        file.put("nativePath", path);

                        // Only a single file was found.
                        selectedFiles.add(file);
                    }

                    // Copy each selected file to either an "images" or "videos" collection.

                    ArrayList<KrollDict> selectedDocuments = new ArrayList<>(selectedFiles);

                    // Invoke a callback with the selection result.
                    if (selectedDocuments.isEmpty()) {
                        if (selectedFiles.isEmpty()) {
                            // Invoke the "cancel" callback if no files were selected.
                            if (fCallback != null) {
                                KrollDict response = new KrollDict();
                                response.put("success", true);
                                response.put("cancel", true);
                                response.put("documents", new ArrayList<String>().toArray(new KrollDict[0]));

                                fCallback.callAsync(getKrollObject(), response);
                            }
                        } else {
                            // Invoke the "error" callback if non-image/video files were selected.
                            String message = "Invalid file types were selected";
                            Log.e(TAG, message);
                            if (fCallback != null) {
                                KrollDict response = new KrollDict();
                                response.put("success", false);

                                fCallback.callAsync(getKrollObject(), response);
                            }
                        }
                    } else {
                        // Invoke the "success" callback with the selected file(s).
                        if (fCallback != null) {
                            KrollDict response = new KrollDict();
                            response.put("success", true);
                            response.put("documents", selectedDocuments.toArray(new KrollDict[0]));
                            fCallback.callAsync(getKrollObject(), response);
                        }
                    }
                    return;
                }

                // Handle single file selection.
                try {
                    //Check for invalid path
                    if (path == null) {
                        String msg = "File path is invalid";
                        Log.e(TAG, msg);
                        if (fCallback != null) {
                            fCallback.callAsync(getKrollObject(), createErrorResponse(1, msg));
                        }
                        return;
                    }
                    if (fCallback != null) {
                        ArrayList<KrollDict> selectedDocuments = new ArrayList<>();
                        KrollDict file = new KrollDict();
                        file.put("name", getFileName(uri));
                        file.put("nativePath", path);
                        selectedDocuments.add(file);

                        KrollDict response = new KrollDict();
                        response.put("success", true);
                        response.put("documents", selectedDocuments.toArray(new KrollDict[0]));

                        fCallback.callAsync(getKrollObject(), response);
                    }
                } catch (OutOfMemoryError e) {
                    String msg = "Not enough memory to get files: " + e.getMessage();
                    Log.e(TAG, msg);
                    if (fCallback != null) {
                        fCallback.callAsync(getKrollObject(), createErrorResponse(1, msg));
                    }
                }
            }

            @Override
            public void onError(Activity activity, int requestCode, Exception e) {
                if (requestCode != code) {
                    return;
                }
                String msg = "Filepicker problem: " + e.getMessage();
                Log.e(TAG, msg, e);
                if (fCallback != null) {
                    fCallback.callAsync(getKrollObject(), createErrorResponse(1, msg));
                }
            }
        });
    }

    // CREDITS: https://stackoverflow.com/a/25005243/5537752
    public String getFileName(Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            Cursor cursor = contentResolver.query(uri, null, null, null, null);
            try {
                if (cursor != null && cursor.moveToFirst()) {
                    int columnIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
                    if (columnIndex >= 0) {
                        result = cursor.getString(columnIndex);
                    }
                }
            } finally {
                cursor.close();
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }
}
