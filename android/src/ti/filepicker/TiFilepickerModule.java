/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.filepicker;

import java.util.ArrayList;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;

import android.app.Activity;
import android.content.Intent;
import droidninja.filepicker.FilePickerBuilder;
import droidninja.filepicker.FilePickerConst;

import org.appcelerator.kroll.common.Log;


@Kroll.module(name="TiFilepicker", id="ti.filepicker")
public class TiFilepickerModule extends KrollModule implements TiActivityResultHandler {
	@Kroll.constant
	public static final int FILE_TYPE_MEDIA = Constants.FILE_TYPE_MEDIA;

	@Kroll.constant
	public static final int FILE_TYPE_DOC = Constants.FILE_TYPE_DOC;

	KrollFunction callback = null;


	public TiFilepickerModule() {
		super();
	}


	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(Constants.LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}


	// applies methods on FilePickerBuilder instance for properties passed in the module
	private FilePickerBuilder createBuilder(KrollDict options) {
		FilePickerBuilder filePickerBuilder = FilePickerBuilder.getInstance();
		
		String title = Utils.getStringOption(options, Constants.Params.TITLE);
		String theme = Utils.getStringOption(options, Constants.Params.THEME);
		String cameraIcon = Utils.getStringOption(options, Constants.Params.CAMERA_ICON);
		int maxCount = Utils.getIntOption(options, Constants.Params.MAX_COUNT);
		boolean enableVideoPicker = Utils.getBoolOption(options, Constants.Params.ENABLE_VIDEO_PICKER);
		boolean enableImagePicker = Utils.getBoolOption(options, Constants.Params.ENABLE_IMAGE_PICKER);
		boolean enableSelectAll = Utils.getBoolOption(options, Constants.Params.SELECT_ALL);
		boolean enableGif = Utils.getBoolOption(options, Constants.Params.ENABLE_GIFS, false);
		boolean enableFolderView = Utils.getBoolOption(options, Constants.Params.ENABLE_FOLDER_VIEW);
		boolean enableDocSupport = Utils.getBoolOption(options, Constants.Params.ENABLE_DOC_SUPPORT);
		boolean enableCameraSupport = Utils.getBoolOption(options, Constants.Params.ENABLE_CAMERA_SUPPORT);
		
		String[] selectedFiles = Utils.getArrayOption(options, Constants.Params.SELECTED_FILES);
		ArrayList<String> selectedFilesList = new ArrayList<String>();
		
		if (!title.isEmpty()) {
			filePickerBuilder.setActivityTitle(title);
		}
		
		if (theme.isEmpty()) {
			theme = "LibAppTheme";	
		}
		
		if (maxCount > 0) {
			filePickerBuilder.setMaxCount(maxCount);
		}
		
		if (!cameraIcon.isEmpty()) {
			int cameraDrawable = Utils.getR("drawable." + cameraIcon);
			if (cameraDrawable != -1) {
				filePickerBuilder.setCameraPlaceholder(cameraDrawable);
			}
		}
		
		if (selectedFiles != null && selectedFiles.length > 0) {
			// remove the possible titanium specific `file://` prefix
			for (String filePath : selectedFiles) {
				selectedFilesList.add( filePath.replaceFirst(Constants.TI_FILE_PREFIX, "") );
			}
		}
		
		filePickerBuilder.setSelectedFiles(selectedFilesList);
		filePickerBuilder.setActivityTheme(Utils.getR("style." + theme));
		filePickerBuilder.enableVideoPicker(enableVideoPicker);
		filePickerBuilder.enableImagePicker(enableImagePicker);
		filePickerBuilder.enableSelectAll(enableSelectAll);
		filePickerBuilder.showGifs(enableGif);
		filePickerBuilder.showFolderView(enableFolderView);
		filePickerBuilder.enableDocSupport(enableDocSupport);
		filePickerBuilder.enableCameraSupport(enableCameraSupport);
		
		return filePickerBuilder;
	}
	
	
	private void launchFilePicker(TiActivitySupport tiActivitySupport, Intent filePickerIntent, int requestCode) {
		if (filePickerIntent != null) {
			tiActivitySupport.launchActivityForResult(filePickerIntent, requestCode, this);
			
		} else {
			Log.w(Constants.LCAT, "filePickerIntent null");
		}
	}


	@Kroll.method
	public void pick(@Kroll.argument(optional=true) KrollDict options) {
		// reset the callback to use the new passed callback's reference
		callback = null;

		if (null != options) {
			if (options.containsKeyAndNotNull(Constants.Params.CALLBACK) && options.get(Constants.Params.CALLBACK) instanceof KrollFunction) {
				callback = (KrollFunction) options.get(Constants.Params.CALLBACK);
			}
		}

		if (null == callback) {
			Log.w(Constants.LCAT, "No callback method passed");
			return;
		}

		if (Utils.hasStoragePermissions()) {
			Activity activity = TiApplication.getAppCurrentActivity();
			TiActivitySupport tiActivitySupport = (TiActivitySupport) activity;
			
			// create file-picker-builder and apply the passed properties
			FilePickerBuilder filePickerBuilder = createBuilder(options);

			// open document picker by default
			if (Constants.FILE_TYPE_MEDIA == (int) options.getOrDefault(Constants.Params.FILE_TYPE, FILE_TYPE_MEDIA)) {
				launchFilePicker(tiActivitySupport, filePickerBuilder.pickPhoto(activity), FilePickerConst.REQUEST_CODE_PHOTO);

			} else {
				launchFilePicker(tiActivitySupport, filePickerBuilder.pickFile(activity), FilePickerConst.REQUEST_CODE_DOC);
			}

		} else {
			Log.e(Constants.LCAT, "Error: Storage permissions not available");
			KrollDict result = new KrollDict();
			result.put(Constants.Params.RESULT_PROPERTY_CANCEL, false);
			result.put(Constants.Params.RESULT_PROPERTY_ERROR, true);
			result.put(Constants.Params.RESULT_PROPERTY_SUCCESS, false);
			result.put(Constants.Params.RESULT_PROPERTY_MESSAGE, "Error: Storage permissions not available");
			callback.callAsync(getKrollObject(), result);
		}
	}
	

	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data) {
		if (callback == null) {
			Log.e(Constants.LCAT, "Error: callback is null");
			return;
		}
		
		KrollDict result = new ResultHandler().onResult(thisRequestCode, resultCode, data);
		callback.callAsync(getKrollObject(), result);
	}


	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		if (callback == null) {
			Log.e(Constants.LCAT, "Error: callback is null");
			return;
		}
		
		KrollDict result = new ResultHandler().onError(requestCode, e);
		callback.callAsync(getKrollObject(), result);
	}

}
