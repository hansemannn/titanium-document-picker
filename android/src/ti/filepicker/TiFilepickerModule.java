/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.filepicker;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import android.app.Activity;
import android.content.Intent;
import droidninja.filepicker.FilePickerBuilder;
import org.appcelerator.kroll.common.Log;


@Kroll.module(name="TiFilepicker", id="ti.filepicker")
public class TiFilepickerModule extends KrollModule implements TiActivityResultHandler {
	@Kroll.constant
	public static final int FILE_TYPE_MEDIA = Constants.FILE_TYPE_MEDIA;
	
	@Kroll.constant
	public static final int FILE_TYPE_DOC = Constants.FILE_TYPE_DOC;
	
	private KrollFunction callback = null;
	
	
	public TiFilepickerModule() {
		super();
	}

	
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.d(Constants.LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}
	
	
	// applies methods on FilePickerBuilder instance for properties passed in the module
	private void applyBuilderMethods(FilePickerBuilder filePickerBuilder, KrollDict options) {
		
	}

	
	@Kroll.method
	public void pickFile(@Kroll.argument(optional=true) KrollDict options) {
		// reset the callback to use the new passed callback's reference
		callback = null;
		
		if (null != options) {
			if (options.containsKeyAndNotNull(Constants.Params.CALLBACK) && options.get(Constants.Params.CALLBACK) instanceof KrollFunction) {
				callback = (KrollFunction) options.get(Constants.Params.CALLBACK);
			}
		}
		
		if (Utils.hasStoragePermissions()) {
			Activity activity = TiApplication.getInstance().getRootOrCurrentActivity();
			
			FilePickerBuilder filePickerBuilder = FilePickerBuilder.getInstance();
			applyBuilderMethods(filePickerBuilder, options);
			
			// open document picker by default
			if (Constants.FILE_TYPE_MEDIA == (int) options.getOrDefault(Constants.Params.FILE_TYPE, FILE_TYPE_MEDIA)) {
				filePickerBuilder.pickPhoto(activity, Constants.REQUEST_CODE_MEDIA);
				
			} else {
				filePickerBuilder.pickFile(activity, Constants.REQUEST_CODE_DOCS);
			}
			
		} else {
			Log.e(Constants.LCAT, "Storage permissions are denied.");
			KrollDict result = new KrollDict();
			result.put(Constants.Params.RESULT_PROPERTY_ERROR, "Storage permissions are denied.");
			callback.callAsync(getKrollObject(), result);
		}
	}

	
	@Override
	public void onResult(Activity activity, int thisRequestCode, int resultCode, Intent data) {
		if (callback == null) return;
		KrollDict result = new ResultHandler().onResult(thisRequestCode, resultCode, data);
		callback.callAsync(getKrollObject(), result);
	}

	
	@Override
	public void onError(Activity activity, int requestCode, Exception e) {
		if (callback == null) return;		
		KrollDict result = new ResultHandler().onError(requestCode, e);
		callback.callAsync(getKrollObject(), result);
	}

}

